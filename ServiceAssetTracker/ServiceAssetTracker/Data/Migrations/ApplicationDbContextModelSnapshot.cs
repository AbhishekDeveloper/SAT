// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ServiceAssetTracker.Data;
using System;

namespace ServiceAssetTracker.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Organisation")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("ContractName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<int>("ResellerId");

                    b.Property<bool>("Status");

                    b.Property<string>("TradingName");

                    b.HasKey("CustomerId");

                    b.HasIndex("ResellerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Job_Reference", b =>
                {
                    b.Property<int>("JobReferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerReference");

                    b.Property<string>("MojoReference");

                    b.Property<string>("WorkflowReference");

                    b.HasKey("JobReferenceId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Job_Reference");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Job_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("CustomerTag");

                    b.Property<int>("JobReferenceId");

                    b.Property<string>("Notes");

                    b.Property<string>("RegionSite");

                    b.Property<int>("ResellerServiceId");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("ShippingReference");

                    b.Property<string>("StockType");

                    b.HasKey("Id");

                    b.ToTable("Job_Service");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.JobReferenceServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JobReferenceId");

                    b.Property<int>("JobServiceId");

                    b.HasKey("Id");

                    b.ToTable("JobReferenceServices");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.PoSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PoId");

                    b.Property<int>("SerialId");

                    b.HasKey("Id");

                    b.ToTable("PoSerials");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Allocated");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("ResellerId");

                    b.Property<string>("Term");

                    b.HasKey("ProductId");

                    b.HasIndex("ResellerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.ProductServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.ToTable("ProductServices");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Purchase_Order", b =>
                {
                    b.Property<int>("PoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("OrderReference");

                    b.Property<double>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("ResellerId");

                    b.HasKey("PoId");

                    b.ToTable("Purchase_Order");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Reseller", b =>
                {
                    b.Property<int>("ResellerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("ContractName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<bool>("Status");

                    b.Property<string>("TradingName");

                    b.HasKey("ResellerId");

                    b.ToTable("Reseller");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Reseller_Service", b =>
                {
                    b.Property<int>("ResellerServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Metric");

                    b.Property<double>("Price");

                    b.Property<int>("ResellerId");

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Task");

                    b.HasKey("ResellerServiceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResellerId");

                    b.ToTable("Reseller_Service");
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.StockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StockTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServiceAssetTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Customer", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ResellerViewModels.Reseller", "Reseller")
                        .WithMany()
                        .HasForeignKey("ResellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Job_Reference", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ResellerViewModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Product", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ResellerViewModels.Reseller", "Reseller")
                        .WithMany()
                        .HasForeignKey("ResellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceAssetTracker.Models.ResellerViewModels.Reseller_Service", b =>
                {
                    b.HasOne("ServiceAssetTracker.Models.ResellerViewModels.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServiceAssetTracker.Models.ResellerViewModels.Reseller", "Reseller")
                        .WithMany()
                        .HasForeignKey("ResellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
